{"version":3,"sources":["Services/CallApi.tsx","Components/FormField/index.tsx","Containers/LoginPage/index.tsx","Containers/LoginPage/Utilities/index.tsx"],"names":["setHeaders","additionalHeaders","REACT_APP_BASE_APP_URL","CallApi","url","requestType","data","a","fetch","method","headers","response","json","parsedData","body","JSON","stringify","Option","Select","TextArea","Input","FormField","props","type","className","name","label","showSearch","style","width","placeholder","optionPlaceholder","optionFilterProp","onChange","value","option","disabled","selectFieldDisabled","optionData","map","rows","textAreaRows","e","target","errorMessage","hardCodedOptions","withRouter","useState","registerFormSelected","setRegisterFormSelected","formDetails","setFormDetails","setErrorMessage","loader","setLoader","successMsg","setSuccessMsg","prevState","DashBoardTabLoader","src","alt","onClick","userDetail","firstName","firstname","emailId","email","password","department","confirmPassword","requestedForms","departmentForms","recievedForms","userDetails","validation","Object","keys","forEach","key","test","validateRegistration","then","setTimeout","isError","message","sessionStorage","setItem","id","history","push"],"mappings":"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","file":"static/js/5.957e1550.chunk.js","sourcesContent":["export const setHeaders = () => {\r\n  const additionalHeaders: any = {};\r\n  additionalHeaders['Content-Type'] = 'application/json';\r\n  additionalHeaders.Accept = 'application/json';\r\n  additionalHeaders['Cache-Control'] = 'no-cache';\r\n  additionalHeaders.Pragma = 'no-cache';\r\n  return additionalHeaders;\r\n};\r\n\r\nexport const postDataOptions = (url: string, data: any = {}) => {\r\n  let options: any;\r\n  if (data) {\r\n    options.data = data;\r\n  }\r\n  options.headers = setHeaders();\r\n  return options;\r\n};\r\n\r\nasync function postRequest(url: string, body: any, headers: {}) {\r\n  try {\r\n    const resposne = await fetch(url, {\r\n      method: 'post',\r\n      headers,\r\n      body: JSON.stringify(body),\r\n    });\r\n    const parsedResponse = await resposne.json();\r\n    JSON.stringify(body);\r\n    return parsedResponse;\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\ntype IRequestType = 'POST' | 'GET';\r\nconst REACT_APP_BASE_APP_URL = \"https://assessment-demo.herokuapp.com\";\r\n\r\nexport async function CallApi(url: string, requestType: IRequestType, data?: any) {\r\n  if (requestType === 'GET') {\r\n    const response = await fetch(REACT_APP_BASE_APP_URL + url, {\r\n      method: requestType,\r\n      headers: setHeaders(),\r\n    });\r\n    const parsedData = await response.json();\r\n    return parsedData;\r\n  } else {\r\n    const response = await fetch(REACT_APP_BASE_APP_URL + url, {\r\n      method: requestType,\r\n      headers: setHeaders(),\r\n      body: JSON.stringify(data),\r\n    })\r\n    const parsedData = await response.json();\r\n    return parsedData;\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport { Input, Select } from 'antd';\r\n\r\n\r\nimport { IOptionData } from '../../Interfaces';\r\n\r\nimport './index.scss';\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\n\r\ninterface FormFieldProps {\r\n  label?: string;\r\n  type: 'text' | 'password' | 'select' | 'textArea';\r\n  textAreaRows?: number;\r\n  onChange: any;\r\n  placeholder?: string;\r\n  name: string;\r\n  errorMessage?: string;\r\n  optionData?: IOptionData[];\r\n  optionPlaceholder?: string;\r\n  selectFieldDisabled?: boolean\r\n}\r\n\r\nfunction FormField(props: FormFieldProps) {\r\n\r\n\r\n  if (props.type === 'select') {\r\n    return (\r\n      <div className={`field field--${props.name}`}>\r\n        <div className={`field__label label--${props.name}`}>\r\n          {props.label} <span className='field__label__astrek'>*</span>\r\n        </div>\r\n        <Select\r\n          showSearch\r\n          style={{ width: 200 }}\r\n          placeholder={props.optionPlaceholder}\r\n          optionFilterProp=\"children\"\r\n          onChange={(value: any, option: any) => props.onChange(props.name, value)}\r\n          disabled={props.selectFieldDisabled}\r\n        >\r\n          {\r\n            props.optionData && props.optionData.map((data: IOptionData) => {\r\n              return <Option value={data.value}>{data.label}</Option>\r\n            })\r\n          }\r\n        </Select>\r\n      </div>\r\n    )\r\n  } else if (props.type === 'textArea') {\r\n    return (\r\n      <div className={`field field--${props.name}`}>\r\n        <div className={`field__label label--${props.name}`}>\r\n          {props.label} <span className='field__label__astrek'>*</span>\r\n        </div>\r\n        <TextArea rows={props.textAreaRows}\r\n          onChange={(e: any) => props.onChange(props.name, e.target.value)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`field field--${props.name}`}>\r\n      <div className={`field__label label--${props.name}`}>\r\n        {props.label} <span className='field__label__astrek'>*</span>\r\n      </div>\r\n      <Input placeholder={props.placeholder} type={props.type} name={props.name}\r\n        onChange={(e: any) => props.onChange(props.name, e.target.value)} />\r\n      {\r\n        props.errorMessage ? <div className=\"field__errorMessage\">\r\n          {props.errorMessage}\r\n        </div>\r\n          : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormField;\r\n","import React, { useState } from 'react';\r\n\r\nimport './index.scss';\r\n\r\nimport FormField from '../../Components/FormField';\r\nimport { IOptionData } from '../../Interfaces';\r\nimport { CallApi, setHeaders } from '../../Services/CallApi';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport { emailValdation, validatePassword } from './Utilities';\r\nimport DashBoardTabLoader from '../../Components/DashBoardTabLoader';\r\n\r\nexport declare const IValidation: [\"ALL_FIELDS\", \"EMAIL\", \"PASSWORD_MISMATCH\", 'NO_ERROR'];\r\n\r\nconst hardCodedOptions: IOptionData[] = [\r\n  { label: 'Maths', value: 'maths' },\r\n  { label: 'History', value: 'history' },\r\n  { label: 'Chemistry', value: 'chemistry' },\r\n  { label: 'Biology', value: 'biology' },\r\n  { label: 'Physics', value: 'physics' },\r\n  { label: 'Science', value: 'science' },\r\n];\r\n\r\nfunction LoginPage(props: any) {\r\n  const [registerFormSelected, setRegisterFormSelected] = useState<boolean>(false)\r\n  const [formDetails, setFormDetails] = useState<any>();\r\n  const [errorMessage, setErrorMessage] = useState<string>();\r\n  const [loader, setLoader] = useState(false);\r\n  const [successMsg, setSuccessMsg] = useState<string>();\r\n\r\n  function onChange(name: string, value: string) {\r\n    setFormDetails((prevState: any) => ({\r\n      ...prevState, [name]: value\r\n    }))\r\n  }\r\n\r\n  function validateRegistration(userDetails: any) {\r\n    let validation = '';\r\n    userDetails && Object.keys(userDetails).forEach((key: any) => {\r\n      if (!userDetails[key]) {\r\n        validation = 'ALL_FIELDS';\r\n      }\r\n    })\r\n    if (validation === 'ALL_FIELDS') {\r\n      setErrorMessage('All Fields must be filled')\r\n      return false;\r\n    } else if (validation === 'EMAIL') {\r\n      setErrorMessage('Email must be in proper format')\r\n      return false;\r\n    } else if (validation === 'PASSWORD_MISMATCH') {\r\n      setErrorMessage('Both passowrd must match')\r\n      return false;\r\n    } else {\r\n      if (!emailValdation(userDetails.emailId)) {\r\n        setErrorMessage('Email Must be in proper format')\r\n        return false\r\n      } else {\r\n        if (!validatePassword(userDetails.password, userDetails.confirmPassword)) {\r\n          setErrorMessage('Both Passowrds must be same')\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function onSubmit() {\r\n    if (registerFormSelected) {\r\n      const userDetail: any = {\r\n        firstName: formDetails.firstname,\r\n        emailId: formDetails.email,\r\n        password: formDetails.password,\r\n        department: formDetails.department,\r\n        confirmPassword: formDetails.confirmPassword,\r\n        requestedForms: [],\r\n        departmentForms: [],\r\n        recievedForms: [],\r\n      }\r\n\r\n      if (validateRegistration(userDetail)) {\r\n        setLoader(true);\r\n        CallApi('/user', 'POST', userDetail)\r\n          .then((parsedData: any) => {\r\n            setLoader(false)\r\n            setRegisterFormSelected(!registerFormSelected);\r\n            setErrorMessage('');\r\n            setSuccessMsg('User registered successfully')\r\n            setTimeout(() => { setSuccessMsg('') }, 1000)\r\n          })\r\n      }\r\n\r\n    } else {\r\n      const userDetail: any = {\r\n        emailId: formDetails.email,\r\n        password: formDetails.password,\r\n      }\r\n      setLoader(true);\r\n      CallApi('/auth/', 'POST', userDetail)\r\n        .then((parsedData: any) => {\r\n          setLoader(false)\r\n          if (parsedData.isError || parsedData.message === 'Invalid EmailId or password') {\r\n            setErrorMessage('Invalid EmailId or password')\r\n          } else {\r\n            sessionStorage.setItem('userDetailId', JSON.stringify(parsedData.id));\r\n            props.history.push('/home');\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  if (loader) {\r\n    return (\r\n      <DashBoardTabLoader />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"loginPage\">\r\n      <div className=\"loginPage__image\">\r\n        <img src=\"https://switchon.io/images/landing-01-02.svg\" alt=\"\" />\r\n      </div>\r\n      <div className=\"loginPage__loginContainer\">\r\n        <div className=\"loginPage__loginContainer__form--signIn\">\r\n\r\n          {/* login header */}\r\n          <div className=\"loginPage__loginContainer__form--signIn__header\">\r\n            {registerFormSelected ? 'Register to Switchon Assignment' : 'Login to Switchon Assignment'}\r\n          </div>\r\n          {successMsg ?\r\n            <div className=\"loginPage__loginContainer__form--signIn__successMsg\">\r\n              {successMsg}\r\n            </div> : null\r\n          }\r\n          {errorMessage ?\r\n            <div className=\"loginPage__loginContainer__form--signIn__errorMessage\">\r\n              {errorMessage}\r\n            </div> : null\r\n          }\r\n          {/* login fields */}\r\n          {registerFormSelected ?\r\n            <FormField name='firstname' type=\"text\" label='First Name' placeholder='Enter your Firstname'\r\n              onChange={onChange} /> : null}\r\n          <FormField name='email' type=\"text\" label='Email' placeholder='Enter your Email'\r\n            onChange={onChange} />\r\n          {registerFormSelected ?\r\n            <FormField name='department' type=\"select\" optionData={hardCodedOptions} label='Select Department'\r\n              optionPlaceholder=\"Select any department\" onChange={onChange} /> : null\r\n          }\r\n          <FormField name='password' type=\"password\" label='Password' placeholder='Enter your Password'\r\n            onChange={onChange} />\r\n          {registerFormSelected ?\r\n            <FormField name='confirmPassword' type=\"password\"\r\n              label='Confirm Password' placeholder='Re Enter your Password' onChange={onChange} /> : null}\r\n\r\n          {/* login button */}\r\n          <div className='loginPage__loginContainer__form--signIn__submitButton' onClick={onSubmit}>\r\n            {registerFormSelected ? 'Register' : 'Login'}\r\n          </div>\r\n\r\n          <div className=\"loginPage__loginContainer__form--signIn__goToRegisterForm\"\r\n            onClick={() => { setRegisterFormSelected(!registerFormSelected); setErrorMessage(''); }}\r\n          >\r\n            {registerFormSelected ? 'Have an account? Then Login here.' : 'Dont have an account? Then Register here.'}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoginPage);\r\n","export function emailValdation(email: string) {\r\n  if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function validatePassword(password: string, confirmPassword: string) {\r\n  return password === confirmPassword ? true : false;\r\n}"],"sourceRoot":""}